/* CGIFParser.java */
/* Generated By:JavaCC: Do not edit this line. CGIFParser.java */
package cgif.parser.javacc;

import cgif.generate.NameGenerator;
import cgif.generate.NameGenerator;
import cgif.parser.CGIFSubtypeException;
import cgif.parser.CGIFVariableException;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import cgif.parser.CGIFParserHelper;
import charger.Global;
import charger.obj.Actor;
import charger.obj.Graph;
import charger.obj.Concept;
import charger.obj.Relation;
import charger.obj.Referent;
import charger.obj.TypeLabel;
import java.io.Reader;
import java.util.ArrayList;

/** Beginning the CGIF parser. */
public class CGIFParser implements CGIFParserConstants {
// https://stackoverflow.com/questions/24156948/javacc-quote-with-escape-character  for how to handle strings

    private CGIFParserHelper helper = new CGIFParserHelper();
    private Graph topGraph = new Graph();

    public  Graph parseCGIFString( String contents ) throws ParseException {
        InputStream is = new ByteArrayInputStream(contents.getBytes());
        ReInit( is );
  //      Graph graph = new Graph();
        topLevelGraph( );
        return topGraph;  // filled in by the productions. See production for graph()
    }

    public void reset() {
        this.ReInit( (Reader) null );
        topGraph.dispose();
        topGraph = new Graph();
        helper.referents.clear();
    }

    public Graph getGraph() {
        return topGraph;
    }

/** Root production. */
  final public void topLevelGraph() throws ParseException {
    trace_call("topLevelGraph");
    try {
      graph(null);
      jj_consume_token(0);

    } finally {
      trace_return("topLevelGraph");
    }
  }

/** parses a graph and adds its elements to . */
  final public Graph graph(Graph enclosingGraph) throws ParseException {
    trace_call("graph");
    try {Graph g;
    if ( enclosingGraph == null )
        g = topGraph;
    else {
        g = new Graph( enclosingGraph );
    }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case LBRACKET:
        case LESSTHAN:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        cgifTerm(g);
      }
{if ("" != null) return g;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("graph");
    }
  }

  final public void cgifTerm(Graph g) throws ParseException {
    trace_call("cgifTerm");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        concept(g);
        break;
        }
      case LPAREN:{
        relation(g);
        break;
        }
      case LESSTHAN:{
        actor(g);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("cgifTerm");
    }
  }

  final public void concept(Graph g) throws ParseException {
    trace_call("concept");
    try {String type = "unitialized";
    String comment = null;
    String chargerComment = null;
    Token tBracket;
    Token tType = null;
    Referent referent = null;
    Concept concept = null;
    Graph graph = null;
      if (jj_2_1(3)) {
        jj_consume_token(LBRACKET);
        tType = jj_consume_token(TYPE);
        jj_consume_token(COLON);
        referent = referent();
        tBracket = jj_consume_token(RBRACKET);
if (Global.importSubtypeRelationsAsHierarchy ) {
            try {
                helper.makeTypeLabel( g, referent.getReferentString(), helper.extractChargerComment( tType, tBracket ) );
            } catch ( CGIFSubtypeException ex ) {
                Global.error( "Error in CGIF subtype relation: " + ex.getMessage() );
            }
        } else {
            // treat as a regular concept
            concept = helper.makeConcept( g, "Type", referent, helper.extractChargerComment( tType, tBracket ) );
        }
      } else if (jj_2_2(4)) {
        jj_consume_token(LBRACKET);
        tType = typelabel();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLON:{
          jj_consume_token(COLON);
          referent = referent();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        tBracket = jj_consume_token(RBRACKET);
// TODO: if tType.image is "Type" then save as TypeLabel, not concept
            // This makes Type a reserved concept type word
        concept = helper.makeConcept( g, tType.image, referent, helper.extractChargerComment( tType, tBracket ) );
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case QUOTED_STRING:
          case IDENTIFIER:{
            tType = typelabel();
            jj_consume_token(COLON);
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            ;
          }
          graph = graph(g);
          tBracket = jj_consume_token(RBRACKET);
if ( tType != null )
            graph.setTextLabel( tType.image );
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("concept");
    }
  }

  final public Token typelabel() throws ParseException {
    trace_call("typelabel");
    try {Token t = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t;}
        break;
        }
      case QUOTED_STRING:{
        t = jj_consume_token(QUOTED_STRING);
// CR-1003 should strip extraneous backslash?
        {if ("" != null) return t;}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typelabel");
    }
  }

  final public Referent referent() throws ParseException {
    trace_call("referent");
    try {Token t = null;
    String s = null;
    Referent ref = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
ref = new Referent( t.image );
        ref.setReferentString( t.image, false );
        {if ("" != null) return ref;}
        t = jj_consume_token(QUOTED_STRING);
ref = new Referent( t.image );
                    ref.setReferentString( t.image, false );
                    {if ("" != null) return ref;}
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:{
          t = jj_consume_token(INTEGER_LITERAL);
          break;
          }
        case FLOATING_POINT_LITERAL:{
          t = jj_consume_token(FLOATING_POINT_LITERAL);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
ref = new Referent( );
        ref.setReferentString( t.image, false );
        ref.setNumber( Double.parseDouble( t.image ) );
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_3(2)) {
          s = variable();
ref = new Referent();
        ref.setVariable( s );
        ref.setReferentString( s );
        {if ("" != null) return ref;}
        } else if (jj_2_4(2)) {
          jj_consume_token(STAR);
ref = new Referent();
        ref.setReferentString( "*", false );
        String cgifref = (new NameGenerator()).generateName();
        ref.setCgifVariableReference( cgifref );
        {if ("" != null) return ref;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case POUNDSIGN:{
            jj_consume_token(POUNDSIGN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDENTIFIER:{
              t = jj_consume_token(IDENTIFIER);
              break;
              }
            case INTEGER_LITERAL:{
              t = jj_consume_token(INTEGER_LITERAL);
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
ref = new Referent();
        ref.setReferentString( "#" + t.image , false );
        ref.setMarker( "#" + t.image );
            break;
            }
          case LBRACE:{
            ref = setReferent();
{if ("" != null) return ref;}
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("referent");
    }
  }

  final public void relation(Graph g) throws ParseException {
    trace_call("relation");
    try {Token rname;
    Token rparen;
    Relation relation = null;
    Referent r = null;
    Token subtype = null;
    Token supertype = null;
    ArrayList<String> variables = new ArrayList<String>();
      if (jj_2_5(4)) {
        jj_consume_token(LPAREN);
        rname = jj_consume_token(SUBTYPE);
        subtype = jj_consume_token(IDENTIFIER);
        supertype = jj_consume_token(IDENTIFIER);
        rparen = jj_consume_token(RPAREN);
if (Global.importSubtypeRelationsAsHierarchy ) {
            // Create a subtype relation between the two types
            try {
                helper.makeGenSpecLink( g,  supertype.image, subtype.image, helper.extractChargerComment( rname, rparen ) );
            } catch ( CGIFSubtypeException ex ) {
                Global.error( "Error in CGIF subtype relation: " + ex.getMessage() );
            }
        } else {
            // treat as a regular relation
            variables.add( supertype.image );
            variables.add( subtype.image );
             try {
                relation = helper.makeRelation( g, "subtype", variables, helper.extractChargerComment( rname, rparen ) );
            } catch ( CGIFVariableException ex ) {
                Global.warning( "Error while parsing CGIF: " + ex.getMessage() );
            }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          rname = jj_consume_token(IDENTIFIER);
          label_2:
          while (true) {
            r = referent();
if ( r.getVariable() != null )
            variables.add( r.getVariable() );
          else
            variables.add( r.getReferentString() );
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACE:
            case QUESTIONMARK:
            case STAR:
            case POUNDSIGN:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case IDENTIFIER:{
              ;
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              break label_2;
            }
          }
          rparen = jj_consume_token(RPAREN);
try {
            relation = helper.makeRelation( g, rname.image, variables, helper.extractChargerComment( rname, rparen ) );
        } catch ( CGIFVariableException ex ) {
            Global.warning( "Error while parsing CGIF: " + ex.getMessage() );
        }
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("relation");
    }
  }

  final public void actor(Graph g) throws ParseException {
    trace_call("actor");
    try {Token aname;
    Token rparen;
    Actor actor = null;
    Referent r = null;
    Token subtype = null;
    Token supertype = null;
    ArrayList<String> inputvariables = new ArrayList<String>();
    ArrayList<String> outputvariables = new ArrayList<String>();
      jj_consume_token(LESSTHAN);
      aname = jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        r = referent();
inputvariables.add( r.getVariable() );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case QUESTIONMARK:
        case STAR:
        case POUNDSIGN:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(BAR);
      label_4:
      while (true) {
        r = referent();
outputvariables.add( r.getVariable() );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case QUESTIONMARK:
        case STAR:
        case POUNDSIGN:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
      }
      rparen = jj_consume_token(GREATERTHAN);
try {
            actor = helper.makeActor( g, aname.image, inputvariables, outputvariables, helper.extractChargerComment( aname, rparen ) );
        } catch ( CGIFVariableException ex ) {
            Global.warning( "Error while parsing CGIF: " + ex.getMessage() );
        }
    } finally {
      trace_return("actor");
    }
  }

  final public String variable() throws ParseException {
    trace_call("variable");
    try {String prefix = null;
    Token var = null;
      prefix = prefix();
      var = jj_consume_token(IDENTIFIER);
if ( prefix == null ) prefix = "";
    {if ("" != null) return prefix + var.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variable");
    }
  }

  final public String prefix() throws ParseException {
    trace_call("prefix");
    try {Token pre = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUESTIONMARK:{
        pre = jj_consume_token(QUESTIONMARK);
{if ("" != null) return pre.image;}
        break;
        }
      case STAR:{
        pre = jj_consume_token(STAR);
{if ("" != null) return pre.image;}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("prefix");
    }
  }

  final public Referent setReferent() throws ParseException {
    trace_call("setReferent");
    try {Referent ref = new Referent();  // the composite referent (may be more than one set member)
    Referent r;     // each individual referent as it is parsed
    String card = null;
      jj_consume_token(LBRACE);
      r = referent();
ref.addSetMember( r );
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        r = referent();
ref.addSetMember( r );
      }
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATSIGN:{
        card = cardinality();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
if ( card != null ) {
            ref.setCardinality( card );
        }
        {if ("" != null) return ref;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("setReferent");
    }
  }

  final public String cardinality() throws ParseException {
    trace_call("cardinality");
    try {String s = null;
    Token d = null;
      jj_consume_token(ATSIGN);
      d = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return d.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("cardinality");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(POUNDSIGN)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SUBTYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CGIFParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x101400,0x101400,0x4000,0x0,0x1000,0x0,0x20000000,0x20000000,0x20000000,0x80100,0x20098100,0x400,0x20098100,0x20098100,0x18000,0x20000,0x40000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x28,0x0,0x28,0x2,0x20,0x22,0x0,0x22,0x0,0x22,0x22,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CGIFParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CGIFParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CGIFParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CGIFParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CGIFParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CGIFParser(CGIFParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CGIFParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
